<!DOCTYPE html>
<html>
<head>
  <title>AlParca</title>
  <meta name="viewport" content="initial-scale=1.0">
  <meta charset="utf-8">
  <style type="text/css">
    html, body {
      height: 100%;
      margin: 0;
      padding: 0%;
    }

    /*Nav menu CSS*/
    .topnav {
      background-color: #f7f7f5;
      overflow: hidden;

    }
    .topnav a {
      float: left;
      display: block;
      text-align: center;
      padding: 14px 16px;
      text-decoration: none;
      font: bold 15px Comfortaa ;
      color: #778899;
    }
    .topnav a:hover {
      background-color: #ddd;
      color: black;
    }

    .topnav a:active {
      background-color: #a29686;
      color: white;
    }

    /*Main body CSS*/

    #mainbody {
      background-color: #f7f7f5;
      position: relative;
      height: 100%;
    }

    #map {
      height: 90%;
      width: 100%;
      position: relative;
      float:right;
    }

    #description {
      font-family: Comfortaa;
      font-size: 15px;
      font-weight: 300;
    }

    #infowindow-content .title {
      font-weight: bold;
    }

    #infowindow-content {
      display: none;
    }

    #map #infowindow-content {
      display: inline;
    }

    .pac-card {
      margin: 10px 10px 0 0;
      border-radius: 2px 0 0 2px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      outline: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      background-color: #fff;
      font-family: Comfortaa;
    }
    #pac-input{
      margin: 10px 10px;
    }

    #pac-container {
      padding-bottom: 12px;
      margin-right: 12px;
    }

    .pac-controls {
      display: inline-block;
      padding: 5px 11px;
    }

    .pac-controls label {
      font-family: Comfortaa;
      font-size: 13px;
      font-weight: 300;
    }

    .sidebar{
      position: relative;
      float:left;
      width: 14%;
      padding: 5px 8px;
      left: 0px;
      text-align: center;

    }

    .sidebar p{
      text-align: center;
      font: bold 15px Comfortaa ;

    }

    /* Search result CSS */
    #pac-input {
      font-family: Comfortaa;
    }

  </style>
  <script type="text/javascript">
      function initAutocomplete() {
      var map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 41.3851, lng: 2.1734},
        zoom: 14,
        mapTypeId:'roadmap',
        styles: [
          {
            featureType: "poi",
            stylers: [
              { visibility: "off" }
            ]
          }
        ],
        mapTypeControl: true,
        mapTypeControlOptions: {
          style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
          position: google.maps.ControlPosition.TOP_LEFT
        },
        zoomControl: true,
        zoomControlOptions: {
          position: google.maps.ControlPosition.LEFT_CENTER
        },
      });

      // Database code
      const MONGO_URL = 'mongodb://parker:parker@ds119685.mlab.com:19685/elparker';

      MongoClient.connect(MONGO_URL, (err, db) => {  
        if (err) {
          return console.log(err);
        }

        // Do something with db here, like inserting a record
        db.collection('real_cars').insertOne(
          {
            title: 'Hello MongoDB',
            text: 'Hopefully this works!'
          },
          function (err, res) {
            if (err) {
              db.close();
              return console.log(err);
            }
            // Success
            db.close();
          }
        )
      });


      //Car Part done by Adam
      //code for creation and movement of cars

      var cars = [];

      var directionsService = new google.maps.DirectionsService();

      //Places a car at position
      function placeCar(position){
        var car = new google.maps.Marker({
          position: position,
          icon: './images/caricon.png',
          clickable: false,
          map: map
        });
        car.path = [];
        car.startPosition = car.position;
        car.waypoints = [];
        car.totalDistance = 0;
        car.pointOnPath = 0;
        cars.push(car);

      }

      //Returns a random point within the area defined bottomLeft and topRight
      function randomPoint(bottomLeft, topRight){
        var latDiff = topRight.lat() - bottomLeft.lat();
        var lngDiff = topRight.lng() - bottomLeft.lng();
        var newLat = bottomLeft.lat() + Math.random() * latDiff;
        var newLng = bottomLeft.lng() + Math.random() * lngDiff;
        return new google.maps.LatLng(newLat, newLng);
      }

      //Place cars at random position in latlng range and drive them to location
      var car_number = 1;
      //this is our box we get data from - cars will be rendered inside and will also drive inside
      var limiting_coordinates = [new google.maps.LatLng(41.391603, 2.145333), new google.maps.LatLng(41.387482, 2.157242)]
      for(var i = 0; i<car_number; i++){
          var rPoint = randomPoint(limiting_coordinates[0], limiting_coordinates[1]);
          directionsService.route({
          origin:rPoint,
          destination: randomPoint(limiting_coordinates[0], limiting_coordinates[1]),
          travelMode: google.maps.TravelMode.DRIVING
        }, function(result, status) {
          if (status == google.maps.DirectionsStatus.OK) {
            placeCar(new google.maps.LatLng(result.routes[0].legs[0].start_location.lat(), result.routes[0].legs[0].start_location.lng()));
          }else{
            alert("Error: Google Maps API not returning location data. The app will restart.");
            window.location = "./";
          }
        });
      }

      //Relocates car to position
      function moveCar(car, position){
        car.setPosition(position);
      }

      //Moves a car along its path at the correct speed
      function advance(car){
        if(car.pointOnPath<car.path.length){
          if(car.midpoint){
            if(car.pointOnPath<(car.path.length-1)){
              moveCar(car, new google.maps.LatLng(
                (car.path[car.pointOnPath].lat() + car.path[(car.pointOnPath+1)].lat())/2,
                (car.path[car.pointOnPath].lng() + car.path[(car.pointOnPath+1)].lng())/2
              ));
            }
            car.midpoint = false;
            car.pointOnPath++;
          }else{
            car.midpoint = true;
            moveCar(car, car.path[car.pointOnPath]);
          }

        }else{
          car.midpoint = false;

          car.target = randomPoint(limiting_coordinates[0], limiting_coordinates[1]);
          directionsService.route({
              origin:car.getPosition(),
              destination:car.target,
              travelMode: google.maps.TravelMode.DRIVING
            }, function(result, status) {
              if (status == google.maps.DirectionsStatus.OK) {
                car.path = result.routes[0].overview_path;
                car.pointOnPath = 0;
              }
            }
          );
        }
      }

      setTimeout(function() {
        timer = setInterval(function(){
          for(var f = 0; f<car_number;f++){
            advance(cars[f]);
          }
        }, 1500);
      }, 2000);
      //Car Part done by Adam

      function CenterControl(controlDiv, map) {
        // Set CSS for the button border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginBottom = '16px';
        controlUI.style.textAlign = 'center';
        controlUI.style.marginTop = '10px';
        controlUI.title = 'Click to set the destination';
        controlDiv.appendChild(controlUI);

        // Set CSS for the button interior.
        var controlText = document.createElement('div');
        controlText.style.color = 'rgb(25,25,25)';
        controlText.style.fontFamily = 'Comfortaa';
        controlText.style.fontSize = '16px';
        controlText.style.lineHeight = '28px';
        controlText.style.paddingLeft = '5px';
        controlText.style.paddingRight = '5px';
        controlText.innerHTML = 'SUBMIT';
        controlUI.appendChild(controlText);

        // Setup the click event listeners: simply set the map to Chicago.
        controlUI.addEventListener('click', function () {
          console.log("Hello world!");
          console.log(markers);
          window.alert(markers[markers.length - 1].position);
        });
      };

      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input); //comment this out to move the search box anywhere
      var centerControlDiv = document.createElement('div');
      var centerControl = new CenterControl(centerControlDiv, map);
      map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);

      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });


      var markers = [];
      searchBox.addListener('places_changed', function() {

        clearLocations();
        var places = searchBox.getPlaces();


        if (places.length == 0) {
          return;
        }

        // Clear out the old markers.

        clearLocations();

        markers = [];

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
          }
          var icon = {
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };

          // Create a marker for each place.
          markers.push(new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name,
            position: place.geometry.location

          }));

          window.alert(markers[0].position);


          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });

      map.addListener('click', function(event) {
        clearLocations();

        placeMarker(event.latLng);

      });

      function placeMarker(location) {
        markers.push( new google.maps.Marker({
          position: location,
          map: map,
        }));
      }

      function clearLocations() { //Clears out all marker data from array 'markers'
        info_Window = new google.maps.InfoWindow();
        info_Window.close();
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
        markers.length = 0;
      }

    }
  </script>
  <script s_src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places"></script>

</head>
<body>

  <!--Top Menu -->
  <div class = "topnav" id = "navbar">
    <ul>
      <a href="index.html">AlParker</a>
      <a href="news.asp">About Us</a>
      <a href="contact.asp">Contact</a>
      <a href="about.asp">Support Us</a>
    </ul>
  </div>

  <!--Main body -->
  <div class="mainbody" id="mainbody" style="height:100%; width:100%;">
    <input id="pac-input" class = "interact" type="text" placeholder="Destination">
    <!--Map-->
    <div class = "map" id="map">
    </div>
  </div>

  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDFq9B3920UjRlpxJOBqSm720kIa7qkjAM&libraries=places&callback=initAutocomplete"
          type="text/javascript"></script>

</body>
</html>

